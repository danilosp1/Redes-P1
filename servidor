#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
import base64


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

package = [b'']
users = {}

def dados_recebidos(conexao, dados):
    global package
    global users

    # Verificar se o pacote é válido
    if dados == b'':
        return sair(conexao)
    
    # Verificar se o pacote anterior ainda não foi finalizado
    if(package[-1] != b'' and b'\r\n' not in package[-1]):
        package[-1] = package[-1] + dados
        package = package[-1].split(b'\r\n')
    else:
        package = dados.split(b'\r\n')

    # Processar cada pacote
    for i in range(0, len(package)-1):
        
        # Verificação de PING
        if b'ping' in package[i].lower():
            conexao.enviar(b":server PONG server :%s\r\n" % package[i].split(b' ', 1)[1])

        # Verificação de NICK
        if b'nick' in package[i].lower():
            novoNick = package[i].split(b' ')[-1]
            if(str(conexao) in users.keys()): 
                antigoNick = users[str(conexao)]
            else:
                antigoNick = b'*'
            nickValido = True
            if(validar_nome(novoNick)):
                for j in users.values():
                    if j.lower() == novoNick.lower(): nickValido = False
                if(nickValido):
                    users[str(conexao)] = novoNick
                    if(antigoNick == b'*'):
                        conexao.enviar(b':server 001 %s :Welcome\r\n' % novoNick)
                        conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % novoNick)
                    else:
                        conexao.enviar(b':%s NICK %s\r\n' % (antigoNick, novoNick))
                else:
                    conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (antigoNick, novoNick))
            else:
                conexao.enviar(b':server 432 %s %s :Erroneous nickname\r\n' % (antigoNick, novoNick))
        
        # Mensagem privada PRIVMSG
        if b'privmsg' in package[i].lower():
            print("não sei")

        if package[i] != b'': print(conexao, package[i])
        

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
